/*! minnpost-climate - v0.0.0 - 2014-04-03
* https://github.com/minnpost/minnpost-climate
* Copyright (c) 2014 MinnPost; Licensed MIT */

define("helpers",["jquery","underscore"],function(a,b){return{wordCase:function(a){return a.replace(/\w\S*/g,function(a){return a.charAt(0).toUpperCase()+a.substr(1).toLowerCase()})},formatNumber:function(a,c){c=b.isUndefined(c)?2:c;var d=/(\d+)(\d{3})/;for(split=a.toFixed(c).toString().split(".");d.test(split[0]);)split[0]=split[0].replace(d,"$1,$2");return c?split[0]+"."+split[1]:split[0]},formatCurrency:function(a){return"$"+this.formatNumber(a,2)},formatPercent:function(a){return this.formatNumber(100*a,1)+"%"},formatPercentChange:function(a){return(a>0?"+":"")+this.formatPercent(a)},hash:function(a){return Math.abs(b.reduce(a.split(""),function(a,b){return a=(a<<5)-a+b.charCodeAt(0),a&a},0))},isMSIE:function(){var a=/(msie) ([\w.]+)/i.exec(navigator.userAgent);return a?parseInt(a[2],10):!1},BackboneAJAX:function(){var a=arguments;return a[0].dataTypeForce!==!0&&(a[0].dataType="jsonp",a[0].jsonpCallback="mpServerSideCachingHelper"+b.hash(a[0].url)),Backbone.$.ajax.apply(Backbone.$,a)},jsonpRequest:function(){var c=arguments[0];return c.dataType="jsonp",c.jsonpCallback="mpServerSideCachingHelper"+b.hash(c.url),a.ajax.apply(a,[c])},getLocalData:function(c){var d=this,e=this.options.jsonpProxy,f=!1,g=[];return this.data=this.data||{},c=b.isArray(c)?c:[c],this.options&&0===this.options.dataPath.indexOf("http")&&(f=!0),b.each(c,function(c){var h;b.isUndefined(d.data[c])&&(h=f?this.jsonpRequest({url:e+encodeURI(d.options.dataPath+c+".json")}):a.getJSON(d.options.dataPath+c+".json"),a.when(h).done(function(a){d.data[c]=a}),g.push(h))}),a.when.apply(a,g)},getRemoteData:function(b){return b.dataType="jsonp",this.options.remoteProxy&&(b.url=b.url+"&callback=proxied_jqjsp",b.url=app.options.remoteProxy+encodeURIComponent(b.url),b.callback="proxied_jqjsp",b.cache=!0),a.ajax(b)}}}),define("routers",["jquery","underscore","Backbone","moment"],function(a,b,c,d){return routers={},routers.AppRouter=c.Router.extend({routes:{"date/:date":"routeDate","*defaultR":"routeDefault"},initialize:function(a){this.app=a.app},start:function(){c.history.start()},routeDefault:function(){this.navigate("/date/today",{trigger:!0,replace:!0})},routeDate:function(a){a="today"===a?d():d(a),a=a.isValid()?a:d(),this.app.renderDate(a)}}),routers}),define("text!templates/loading.mustache",[],function(){return'<div class="loading-container">\n  <div class="loading"><span>Loading...</span></div>\n</div>'}),define("text!templates/chart-tooltip.underscore",[],function(){return"<div class=\"chart-tooltip\">\n  <strong><%= Highcharts.dateFormat('%A, %b. %e, %Y', data.key) %></strong><br/>\n  <%= data.series.name %>: <%= Math.round(data.y * 10) / 10 %>&deg;F <br />\n  <br />\n  Average temperature: <%= Math.round(data.point.tavg * 10) / 10 %>&deg;F <br />\n  High and low temperature: <%= Math.round(data.point.tmax * 10) / 10 %> - <%= Math.round(data.point.tmin * 10) / 10 %>&deg;F<br />\n  <br />\n  Normal avg. temperature: <%= Math.round(data.point.ntavg * 10) / 10 %>&deg;F <br />\n  Normal avg. high and low: <%= Math.round(data.point.ntmax * 10) / 10 %> - <%= Math.round(data.point.ntmin * 10) / 10 %>&deg;F<br />\n</div>\n"}),define("text!templates/application.mustache",[],function(){return'<div class="message-container"></div>\n\n<div class="content-container">\n\n  {{^computed}}\n    {{>loading}}\n  {{/computed}}\n\n  {{#computed}}\n\n    {{^isToday}}\n      <div class="not-today">\n        Showing weather trends from <strong>{{ date.format(\'dddd, MMM. Do, YYYY\') }}</strong>.\n      </div>\n    {{/isToday}}\n\n    <div class="section-section">\n      <h3>Today</h3>\n      <p>\n        {{#isToday}} Today\'s average temperature so far is {{/isToday}}\n        {{^isToday}} Today\'s average temperature was {{/isToday}}\n        about\n        <strong>\n          {{ Math.abs(Math.round(sectionToday.avgTempDiff * 10) / 10) }}&deg;F\n          {{#(sectionToday.avgTempDiff > 0)}} warmer {{/()}}\n          {{#(sectionToday.avgTempDiff < 0)}} colder {{/()}}\n        </strong>\n        than the normal temperature for this date ({{ sectionToday.days.0.ntavg }}&deg;F).\n      </p>\n    </div>\n\n\n    <div class="section-section">\n      <h3>Last week</h3>\n\n      <p>\n        This past week (7 days) was, on average, about\n        <strong>\n          {{ Math.abs(Math.round(sectionWeek.avgTempDiff * 10) / 10) }}&deg;F\n          {{#(sectionWeek.avgTempDiff > 0)}} warmer {{/()}}\n          {{#(sectionWeek.avgTempDiff < 0)}} colder {{/()}}\n        </strong>\n        each day than the normal average daily temperature.\n      </p>\n\n      <div class="chart chart-section-week"></div>\n    </div>\n\n\n    <div class="section-section">\n      <h3>Last 30 days</h3>\n\n      <p>\n        The past month (30 days) was, on average, about\n        <strong>\n          {{ Math.abs(Math.round(sectionMonth.avgTempDiff * 10) / 10) }}&deg;F\n          {{#(sectionMonth.avgTempDiff > 0)}} warmer {{/()}}\n          {{#(sectionMonth.avgTempDiff < 0)}} colder {{/()}}\n        </strong>\n        each day than the normal average temperature.\n      </p>\n\n      <div class="chart chart-section-month"></div>\n    </div>\n\n\n    <div class="section-section">\n      <h3>This {{ season }}</h3>\n\n      <p>\n        This {{ season }}\n        ({{ seasonSpan.start.format(\'MMM. Do\') }} - {{ seasonSpan.end.subtract(1, \'days\').format(\'MMM. DD\') }})\n        has been, on average, about\n        <strong>\n          {{ Math.abs(Math.round(sectionSeason.avgTempDiff * 10) / 10) }}&deg;F\n          {{#(sectionSeason.avgTempDiff > 0)}} warmer {{/()}}\n          {{#(sectionSeason.avgTempDiff < 0)}} colder {{/()}}\n        </strong>\n        each day than the normal average temperature.\n      </p>\n\n      <div class="chart chart-section-season"></div>\n    </div>\n\n  {{/computed}}\n\n</div>\n\n<div class="footnote-container">\n  <div class="footnote">\n    <p><a href="http://www.ncdc.noaa.gov/oa/climate/normals/usnormals.html" target="_blank">Climate normals</a>, the baseline for comparison, are the latest three-decade (1981-2010) averages of climatological variables and are provided by the National Oceanic and Atmospheric Administration (NOAA).</p>\n\n    <p>Observation data for Minneapolis/St. Paul International Airport and data prior to 1938 is for downtown Minneapolis.  Data collected from\n      <a href="http://www.ncdc.noaa.gov/cgi-bin/res40.pl?page=gsod.html" target="_blank">NOAA National Climatic Data Center (NCDC) Global Surface Summary of Day (GSOD)</a>, <a href="http://www.ncdc.noaa.gov/oa/climate/ghcn-daily/" target="_blank">NOAA NCDC Global Historical Climatology Network (GHCN)</a>, <a href="http://climate.umn.edu/doc/twin_cities/twin_cities.htm" target="_blank">Minnesota Climatology Office Historical Climate Data Listings for the Twin Cities</a>, <a href="http://www.nws.noaa.gov/climate/f6.php?wfo=mpx" target="_blank">NOAA National Weather Service (NWS) Preliminary Monthly Climate Data</a>, and <a href="http://w1.weather.gov/xml/current_obs/seek.php" target="_blank">NOAA NWS Feeds of Current Weather Conditions</a>.</p>\n\n    <p>Some code, techniques, and data on <a href="https://github.com/minnpost/minnpost-climate" target="_blank">Github</a>. Calendar icon designed by Marcio Duarte from <a href="http://thenounproject.com/term/calendar/7134/" target="_blank">the Noun Project</a>.</p>\n\n  </div>\n</div>\n'}),define("minnpost-climate",["underscore","jquery","moment","Ractive","Ractive-events-tap","Highcharts","HighchartsMore","helpers","routers","text!templates/loading.mustache","text!templates/chart-tooltip.underscore","text!templates/application.mustache"],function(a,b,c,d,e,f,g,h,i,j,k,l){k=a.template(k);var m=function(c){this.options=a.extend(this.defaultOptions,c),this.el=this.options.el,this.el&&(this.$el=b(this.el))};return a.extend(m.prototype,{start:function(){this.now=c(),this.today=c(this.now.format("YYYY-MM-DD")),this.yesterday=c(this.today).subtract(1,"days"),this.date=c(this.today),this.days={},this.router=new i.AppRouter({app:this}),this.router.start()},renderDate:function(b){this.date=b,this.isToday=b.isSame(this.today,"day"),a.isObject(this.view)&&(this.view.teardown(),this.days={}),this.view=new d({el:this.$el,template:l,data:{isToday:this.isToday,date:b,options:this.options,helpers:h},partials:{loading:j}}),this.view.observe("computed",function(){this.drawCharts()},{init:!1,defer:!0,context:this}),this.fetchRecentObservations(b).done(a.bind(this.dataLoaded,this))},handleError:function(){this.router.routeDefault()},dataLoaded:function(b){if(!a.isArray(b)||b.length<30)return this.handleError("Not enough data found."),void 0;var d=a.max(b,function(a){return c(a.date,"YYYY-MM-DD").unix()});this.date.isSame(d.date)||(this.date=c(d.date)),this.year=this.date.year(),this.determineSeason(),this.createSections()},drawCharts:function(){this.$el.find(".chart-section-week").highcharts(this.makeChartOptions(this.sectionWeek)),this.$el.find(".chart-section-month").highcharts(this.makeChartOptions(this.sectionMonth)),this.$el.find(".chart-section-season").highcharts(this.makeChartOptions(this.sectionSeason))},makeChartOptions:function(b){var c=a.clone(this.options.chartOptions);return a.extend({},c,{tooltip:{shadow:!1,borderWidth:.5,style:{},useHTML:!0,formatter:function(){return k({data:this})}},series:[{name:"Difference of average temperature from normal",type:"column",color:"#1D71A5",zIndex:100,data:a.map(b.days,function(b){return a.extend({x:Date.UTC(b.date.year(),b.date.month(),b.date.date()),y:Math.round(10*b.tempDiff)/10,color:b.tempDiff>=0?"#DB423D":"#15829E"},b)})}]})},createSections:function(){var b=this,d=c(this.date).subtract(7,"days"),e=c(this.date).subtract(30,"days");this.sectionToday=this.computeSection(a.filter(this.days,function(a){return a.date.isSame(b.date)})),this.sectionWeek=this.computeSection(a.sortBy(a.filter(this.days,function(a){return a.date.isAfter(d)}),function(a){return a.date.unix()})),this.sectionMonth=this.computeSection(a.sortBy(a.filter(this.days,function(a){return a.date.isAfter(e)}),function(a){return a.date.unix()})),this.sectionSeason=this.computeSection(a.sortBy(a.filter(this.days,function(a){return(a.date.isAfter(b.options.seasons[b.season].start)||a.date.isSame(b.options.seasons[b.season].start))&&a.date.isBefore(b.options.seasons[b.season].end)}),function(a){return a.date.unix()})),this.view.set("sectionToday",this.sectionToday),this.view.set("sectionWeek",this.sectionWeek),this.view.set("sectionMonth",this.sectionMonth),this.view.set("sectionSeason",this.sectionSeason),this.view.set("computed",!0)},computeSection:function(b){return b={days:b},b.days=a.map(b.days,function(a){return a.tempDiff=a.tavg-a.ntavg,a}),b.totalTempDiff=a.reduce(b.days,function(a,b){return a+(b.tavg-b.ntavg)},0),b.avgTempDiff=b.totalTempDiff/b.days.length,b},fetchRecentObservations:function(){var d=this,e=c(this.date).subtract("months",5),f=[];f.push("SELECT"),f.push("  o.date, o.tmax, o.tmin,"),f.push("  n.ntmax, n.ntmin, n.ntavg,"),f.push("    CASE WHEN tavg IS NULL THEN ROUND((o.tmax + o.tmin) / 2, 2)"),f.push("      ELSE tavg END AS tavg"),f.push("FROM observations AS o"),f.push("  INNER JOIN normals AS n ON"),f.push("    o.month = n.month AND o.day = n.day"),f.push("WHERE o.date > DATE('"+e.format("YYYY-MM-DD")+"')"),f.push("  AND o.date <= DATE('"+this.date.format("YYYY-MM-DD")+"')");var g=this.options.dailyObservationsPath.replace("[[[QUERY]]]",encodeURIComponent(f.join(" ")));return b.getJSON(g).done(function(b){a.each(b,function(b){var e;b.date=c(b.date,"YYYY-MM-DD"),e=d.idFromDate(b.date),d.days[e]=d.days[e]||{},a.extend(d.days[e],b)})})},determineSeason:function(){var b=this,c=this.date.year();a.each(this.options.seasons,function(a,d){a.start.year(c),a.end.year(c),"winter"===d&&(b.date.month()<6?a.start.year(c-1):a.end.year(c+1)),(b.date.isAfter(a.start)||b.date.isSame(a.start))&&b.date.isBefore(a.end)&&(b.season=d)}),this.view.set("season",this.season),this.view.set("seasonSpan",this.options.seasons[this.season])},chartData:function(b,c){return c=a.isArray(c)?c:[c],a.values(a.map(b,function(b){var d=Date.UTC(b.date.year(),b.date.month(),b.date.date()),e=[d];return a.each(c,function(a){e.push(b[a])}),e}))},dateFromMonthDay:function(a,b){var d=c([this.year,a-1,b]),e=d.isAfter(this.date)?this.year-1:this.year;return c([e,a-1,b])},idFromDate:function(a){return a.format("YYYYMMDD")},defaultOptions:{dailyObservationsPath:"https://premium.scraperwiki.com/d7fssyq/a43576483d6f43a/sql/?callback=?&q=[[[QUERY]]]",seasons:{winter:{start:c("2013-12-01","YYYY-MM-DD"),end:c("2014-04-01","YYYY-MM-DD")},spring:{start:c("2014-04-01","YYYY-MM-DD"),end:c("2014-06-21","YYYY-MM-DD")},summer:{start:c("2014-06-21","YYYY-MM-DD"),end:c("2014-09-21","YYYY-MM-DD")},fall:{start:c("2014-09-21","YYYY-MM-DD"),end:c("2014-12-1","YYYY-MM-DD")}},chartOptions:{chart:{style:{fontFamily:'"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif',color:"#BCBCBC"},spacingRight:15},colors:["#1D71A5","#1DA595","#1DA551"],credits:{enabled:!1},title:{enabled:!1,text:null},legend:{enabled:!1,borderWidth:0},plotOptions:{line:{lineWidth:3,states:{hover:{lineWidth:3}},marker:{enabled:!1}},column:{minPointLength:2,groupPadding:.05,pointPadding:0}},xAxis:{type:"datetime",startOnTick:!1,dateTimeLabelFormats:{hour:" ",day:"%b %e",week:"%b %e",month:"%b %e",year:"%b"}},yAxis:{title:{enabled:!0,useHTML:!0,text:"&deg;F",margin:5,style:{color:"inherit",fontWeight:"normal"}},gridLineColor:"#BCBCBC"},tooltip:{shared:!0,style:{},useHTML:!0,valueSuffix:"&deg;F"}}}}),m});